# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import coordinator_pb2 as coordinator__pb2


class CoordinatorServiceStub(object):
    """The Coordinator service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartJob = channel.unary_unary(
                '/MapReduce.CoordinatorService/StartJob',
                request_serializer=coordinator__pb2.JobRequest.SerializeToString,
                response_deserializer=coordinator__pb2.JobResponse.FromString,
                )
        self.CheckJobStatus = channel.unary_unary(
                '/MapReduce.CoordinatorService/CheckJobStatus',
                request_serializer=coordinator__pb2.JobStatusRequest.SerializeToString,
                response_deserializer=coordinator__pb2.JobStatusResponse.FromString,
                )
        self.NotifyMapperCompletion = channel.unary_unary(
                '/MapReduce.CoordinatorService/NotifyMapperCompletion',
                request_serializer=coordinator__pb2.MapperCompletionNotification.SerializeToString,
                response_deserializer=coordinator__pb2.NotificationResponse.FromString,
                )
        self.NotifyReducerCompletion = channel.unary_unary(
                '/MapReduce.CoordinatorService/NotifyReducerCompletion',
                request_serializer=coordinator__pb2.ReducerCompletionNotification.SerializeToString,
                response_deserializer=coordinator__pb2.NotificationResponse.FromString,
                )


class CoordinatorServiceServicer(object):
    """The Coordinator service definition.
    """

    def StartJob(self, request, context):
        """Starts a new MapReduce job with the given input.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckJobStatus(self, request, context):
        """Checks the status of a MapReduce job.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NotifyMapperCompletion(self, request, context):
        """Notifies of mapper completion
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NotifyReducerCompletion(self, request, context):
        """RPC method for reducer completion notifications
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CoordinatorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartJob': grpc.unary_unary_rpc_method_handler(
                    servicer.StartJob,
                    request_deserializer=coordinator__pb2.JobRequest.FromString,
                    response_serializer=coordinator__pb2.JobResponse.SerializeToString,
            ),
            'CheckJobStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckJobStatus,
                    request_deserializer=coordinator__pb2.JobStatusRequest.FromString,
                    response_serializer=coordinator__pb2.JobStatusResponse.SerializeToString,
            ),
            'NotifyMapperCompletion': grpc.unary_unary_rpc_method_handler(
                    servicer.NotifyMapperCompletion,
                    request_deserializer=coordinator__pb2.MapperCompletionNotification.FromString,
                    response_serializer=coordinator__pb2.NotificationResponse.SerializeToString,
            ),
            'NotifyReducerCompletion': grpc.unary_unary_rpc_method_handler(
                    servicer.NotifyReducerCompletion,
                    request_deserializer=coordinator__pb2.ReducerCompletionNotification.FromString,
                    response_serializer=coordinator__pb2.NotificationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MapReduce.CoordinatorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CoordinatorService(object):
    """The Coordinator service definition.
    """

    @staticmethod
    def StartJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MapReduce.CoordinatorService/StartJob',
            coordinator__pb2.JobRequest.SerializeToString,
            coordinator__pb2.JobResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckJobStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MapReduce.CoordinatorService/CheckJobStatus',
            coordinator__pb2.JobStatusRequest.SerializeToString,
            coordinator__pb2.JobStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NotifyMapperCompletion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MapReduce.CoordinatorService/NotifyMapperCompletion',
            coordinator__pb2.MapperCompletionNotification.SerializeToString,
            coordinator__pb2.NotificationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NotifyReducerCompletion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MapReduce.CoordinatorService/NotifyReducerCompletion',
            coordinator__pb2.ReducerCompletionNotification.SerializeToString,
            coordinator__pb2.NotificationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
